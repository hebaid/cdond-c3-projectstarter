version: 2.1

commands:

  destroy-environment:
    description: Destroy front-end and back-end cloudformation stacks
    steps:
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-front-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "Content-Type: text/plain" -H "token: 30b5775c-1059-4133-ba75-3381e3a22d5b" --request GET https://api.memstash.io/values/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-DBMigrationStatus)
            if [ ${SUCCESS} = "1" ];
            then
              cd ~/project/backend
              npm i
              npm run migrations:revert
            fi
 


orbs:
  slack: circleci/slack@4.1
         
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install --package-lock
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            
            npm audit fix --audit-level=critical --force
            npm audit fix --force


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run frobackend ntend scan
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            
            npm audit fix --audit-level=critical --force
            npm audit fix --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-front-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 96f11936-5119-4b04-ac7f-b73f59eb5ef8" --request PUT --data $BACKEND_IP https://api.memstash.io/values/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP
            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          name:  persist the modified inventory file to the workspace
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ca:88:76:6c:83:b0:7b:61:cc:14:4f:d4:be:5e:f7:46"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies "Install dependencies for the next step, such as tar, gzip, ansible, or awscli."
          command: |
            apk update
            pip install awscli
            apk add --upgrade gzip
            apk add --upgrade tar
            apk add --update ansible

      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: Run migrations
          command: |
              cd ./backend
              npm install
              npm run migrations  > migrations_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt; then
              curl -H "Content-Type: text/plain" -H "token: 30b5775c-1059-4133-ba75-3381e3a22d5b" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi 
       # Here's where you will add some code to rollback on failure     

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-5ab34ae" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm i --save-dev braces
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
    
workflows:
  default:
    jobs:
      -   deploy-frontend